/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by client-gen. DO NOT EDIT.

package clientset

import (
	"fmt"
	"net/http"

	authorizationv1alpha1 "github.com/myeong01/ai-playground/cmd/controllers/clientset/clientset/typed/authorization/v1alpha1"
	containerv1alpha1 "github.com/myeong01/ai-playground/cmd/controllers/clientset/clientset/typed/container/v1alpha1"
	datasetv1alpha1 "github.com/myeong01/ai-playground/cmd/controllers/clientset/clientset/typed/dataset/v1alpha1"
	imagev1alpha1 "github.com/myeong01/ai-playground/cmd/controllers/clientset/clientset/typed/image/v1alpha1"
	nniv1alpha1 "github.com/myeong01/ai-playground/cmd/controllers/clientset/clientset/typed/nni/v1alpha1"
	playgroundv1alpha1 "github.com/myeong01/ai-playground/cmd/controllers/clientset/clientset/typed/playground/v1alpha1"
	resourcev1alpha1 "github.com/myeong01/ai-playground/cmd/controllers/clientset/clientset/typed/resource/v1alpha1"
	discovery "k8s.io/client-go/discovery"
	rest "k8s.io/client-go/rest"
	flowcontrol "k8s.io/client-go/util/flowcontrol"
)

type Interface interface {
	Discovery() discovery.DiscoveryInterface
	AuthorizationV1alpha1() authorizationv1alpha1.AuthorizationV1alpha1Interface
	ContainerV1alpha1() containerv1alpha1.ContainerV1alpha1Interface
	DatasetV1alpha1() datasetv1alpha1.DatasetV1alpha1Interface
	ImageV1alpha1() imagev1alpha1.ImageV1alpha1Interface
	NniV1alpha1() nniv1alpha1.NniV1alpha1Interface
	PlaygroundV1alpha1() playgroundv1alpha1.PlaygroundV1alpha1Interface
	ResourceV1alpha1() resourcev1alpha1.ResourceV1alpha1Interface
}

// Clientset contains the clients for groups.
type Clientset struct {
	*discovery.DiscoveryClient
	authorizationV1alpha1 *authorizationv1alpha1.AuthorizationV1alpha1Client
	containerV1alpha1     *containerv1alpha1.ContainerV1alpha1Client
	datasetV1alpha1       *datasetv1alpha1.DatasetV1alpha1Client
	imageV1alpha1         *imagev1alpha1.ImageV1alpha1Client
	nniV1alpha1           *nniv1alpha1.NniV1alpha1Client
	playgroundV1alpha1    *playgroundv1alpha1.PlaygroundV1alpha1Client
	resourceV1alpha1      *resourcev1alpha1.ResourceV1alpha1Client
}

// AuthorizationV1alpha1 retrieves the AuthorizationV1alpha1Client
func (c *Clientset) AuthorizationV1alpha1() authorizationv1alpha1.AuthorizationV1alpha1Interface {
	return c.authorizationV1alpha1
}

// ContainerV1alpha1 retrieves the ContainerV1alpha1Client
func (c *Clientset) ContainerV1alpha1() containerv1alpha1.ContainerV1alpha1Interface {
	return c.containerV1alpha1
}

// DatasetV1alpha1 retrieves the DatasetV1alpha1Client
func (c *Clientset) DatasetV1alpha1() datasetv1alpha1.DatasetV1alpha1Interface {
	return c.datasetV1alpha1
}

// ImageV1alpha1 retrieves the ImageV1alpha1Client
func (c *Clientset) ImageV1alpha1() imagev1alpha1.ImageV1alpha1Interface {
	return c.imageV1alpha1
}

// NniV1alpha1 retrieves the NniV1alpha1Client
func (c *Clientset) NniV1alpha1() nniv1alpha1.NniV1alpha1Interface {
	return c.nniV1alpha1
}

// PlaygroundV1alpha1 retrieves the PlaygroundV1alpha1Client
func (c *Clientset) PlaygroundV1alpha1() playgroundv1alpha1.PlaygroundV1alpha1Interface {
	return c.playgroundV1alpha1
}

// ResourceV1alpha1 retrieves the ResourceV1alpha1Client
func (c *Clientset) ResourceV1alpha1() resourcev1alpha1.ResourceV1alpha1Interface {
	return c.resourceV1alpha1
}

// Discovery retrieves the DiscoveryClient
func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	if c == nil {
		return nil
	}
	return c.DiscoveryClient
}

// NewForConfig creates a new Clientset for the given config.
// If config's RateLimiter is not set and QPS and Burst are acceptable,
// NewForConfig will generate a rate-limiter in configShallowCopy.
// NewForConfig is equivalent to NewForConfigAndClient(c, httpClient),
// where httpClient was generated with rest.HTTPClientFor(c).
func NewForConfig(c *rest.Config) (*Clientset, error) {
	configShallowCopy := *c

	if configShallowCopy.UserAgent == "" {
		configShallowCopy.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	// share the transport between all clients
	httpClient, err := rest.HTTPClientFor(&configShallowCopy)
	if err != nil {
		return nil, err
	}

	return NewForConfigAndClient(&configShallowCopy, httpClient)
}

// NewForConfigAndClient creates a new Clientset for the given config and http client.
// Note the http client provided takes precedence over the configured transport values.
// If config's RateLimiter is not set and QPS and Burst are acceptable,
// NewForConfigAndClient will generate a rate-limiter in configShallowCopy.
func NewForConfigAndClient(c *rest.Config, httpClient *http.Client) (*Clientset, error) {
	configShallowCopy := *c
	if configShallowCopy.RateLimiter == nil && configShallowCopy.QPS > 0 {
		if configShallowCopy.Burst <= 0 {
			return nil, fmt.Errorf("burst is required to be greater than 0 when RateLimiter is not set and QPS is set to greater than 0")
		}
		configShallowCopy.RateLimiter = flowcontrol.NewTokenBucketRateLimiter(configShallowCopy.QPS, configShallowCopy.Burst)
	}

	var cs Clientset
	var err error
	cs.authorizationV1alpha1, err = authorizationv1alpha1.NewForConfigAndClient(&configShallowCopy, httpClient)
	if err != nil {
		return nil, err
	}
	cs.containerV1alpha1, err = containerv1alpha1.NewForConfigAndClient(&configShallowCopy, httpClient)
	if err != nil {
		return nil, err
	}
	cs.datasetV1alpha1, err = datasetv1alpha1.NewForConfigAndClient(&configShallowCopy, httpClient)
	if err != nil {
		return nil, err
	}
	cs.imageV1alpha1, err = imagev1alpha1.NewForConfigAndClient(&configShallowCopy, httpClient)
	if err != nil {
		return nil, err
	}
	cs.nniV1alpha1, err = nniv1alpha1.NewForConfigAndClient(&configShallowCopy, httpClient)
	if err != nil {
		return nil, err
	}
	cs.playgroundV1alpha1, err = playgroundv1alpha1.NewForConfigAndClient(&configShallowCopy, httpClient)
	if err != nil {
		return nil, err
	}
	cs.resourceV1alpha1, err = resourcev1alpha1.NewForConfigAndClient(&configShallowCopy, httpClient)
	if err != nil {
		return nil, err
	}

	cs.DiscoveryClient, err = discovery.NewDiscoveryClientForConfigAndClient(&configShallowCopy, httpClient)
	if err != nil {
		return nil, err
	}
	return &cs, nil
}

// NewForConfigOrDie creates a new Clientset for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *Clientset {
	cs, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return cs
}

// New creates a new Clientset for the given RESTClient.
func New(c rest.Interface) *Clientset {
	var cs Clientset
	cs.authorizationV1alpha1 = authorizationv1alpha1.New(c)
	cs.containerV1alpha1 = containerv1alpha1.New(c)
	cs.datasetV1alpha1 = datasetv1alpha1.New(c)
	cs.imageV1alpha1 = imagev1alpha1.New(c)
	cs.nniV1alpha1 = nniv1alpha1.New(c)
	cs.playgroundV1alpha1 = playgroundv1alpha1.New(c)
	cs.resourceV1alpha1 = resourcev1alpha1.New(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClient(c)
	return &cs
}
